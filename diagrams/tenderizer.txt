title Tenderizer

actor Alice
participantspacing 2
participantgroup Tenderize Protocol
participant Tenderizer(tToken)
participant Adapter
participant Unlocks(ERC721)
end
participantgroup XYZ Network
participant Staking_XYZ
participant ERC20_XYZ
end

group Deposit
entryspacing 0.3
note over Alice:Approve Token_XYZ to be\n spent by Tenderizer
Alice->ERC20_XYZ: **approve**\n -address spender\n -uint256 amount
Alice->Tenderizer(tToken): **deposit**\n -address receiver\n -uint256 assets
Tenderizer(tToken)->Tenderizer(tToken): rebase
Tenderizer(tToken)->ERC20_XYZ: **transferFrom**\n -address sender\n -address recipient\n -uint256 amount
Tenderizer(tToken)->Adapter: **stake**\n -address validator \n -uint256 amount
Adapter->(2)Staking_XYZ: stake assets to validator
note over Staking_XYZ: Alice's assets are staked
Adapter-->(2)Tenderizer(tToken): amount staked
note over Tenderizer(tToken): mint amount staked\n in tTokens for Alice
Tenderizer(tToken)-->Alice: **mint tToken**\n -address to\n -uint256 amount
entryspacing 2
end

group Rebase
note over Tenderizer(tToken): Rebase can be triggered manually,\n or automatically by any contract function
Tenderizer(tToken)->Adapter: **claimRewards**\n -address validator \n -uint256 currentStake
Adapter->Adapter: **shouldRebase**?
Adapter->Staking_XYZ: **read staked amount**
Adapter(1)<--Staking_XYZ: new stake
Adapter-->(1)Tenderizer(tToken): new stake
note over Tenderizer(tToken): Set tToken supply\nequal to "new stake"
end

group Unlock
Alice->Tenderizer(tToken): **unlock**\n -uint256 assets
Tenderizer(tToken)->Tenderizer(tToken): rebase
Tenderizer(tToken)->Tenderizer(tToken): **burn tToken**\n -address from\n -uint256 amount
Tenderizer(tToken)->Adapter:**unstake**\n -address validator\n -uint256 amount
Adapter->Staking_XYZ: unstake tokens
note over Staking_XYZ: Tokens become withdrawable\n after unstaking period\n of Staking_XYZ
note over Adapter: If Staking_XYZ does not\n support native unlocks,\n Adapter will hold the logic\n to create unlocks for\n Tenderizer
Adapter-->(1)Tenderizer(tToken):unlock ID
Tenderizer(tToken)->Unlocks(ERC721):**createUnlock**\n -address receiver\n -uint256 unlockID
note over Unlocks(ERC721): tokenID is msg.sender\n(Tenderizer) ABI Encoded with\nunlockID as a uint256
Unlocks(ERC721)->Unlocks(ERC721):**mint**\n -address receiver\n -uint256 tokenID
Tenderizer(tToken)-->(1)Alice:UnlockID
end

group Withdraw
Alice->Tenderizer(tToken): **withdraw**\n -address receiver \n -uint256 unlockID
Tenderizer(tToken)->Unlocks(ERC721):**useUnlock**\n -address owner\n -uint256 unlockID
note over Unlocks(ERC721): tokenID is msg.sender\n(Tenderizer) ABI Encoded with\nunlockID as a uint256
Unlocks(ERC721)->Unlocks(ERC721):**burn**\n -address owner\n -uint256 tokenID
Tenderizer(tToken)->Adapter:**withdraw**\n -address validator\n -uint256 unlockID
Adapter-->(1)Tenderizer(tToken): amount withdrawn
note over Tenderizer(tToken): transfer amount\nwithdrawn to Alice
Tenderizer(tToken)->ERC20_XYZ:**transfer**\n -address to\n -uint256 amount

end